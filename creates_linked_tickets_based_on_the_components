import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.issue.link.IssueLinkManager
import com.atlassian.jira.issue.fields.Component
import com.atlassian.jira.issue.IssueInputParameters

def issueManager = ComponentAccessor.getIssueManager()
def projectManager = ComponentAccessor.getProjectManager()
def issueService = ComponentAccessor.getIssueService()
def jiraAuthenticationContext = ComponentAccessor.getJiraAuthenticationContext()
def user = jiraAuthenticationContext.getLoggedInUser()
def issueLinkManager = ComponentAccessor.getIssueLinkManager()

def createLinkedIssue(String projectKey, String summary, String description, String issueTypeId, Issue parentIssue) {
    IssueService.CreateValidationResult createValidationResult
    IssueService.IssueResult createResult

    def issueInputParameters = issueService.newIssueInputParameters()
    issueInputParameters.with {
        setProjectId(projectManager.getProjectObjByKey(projectKey).id)
        setIssueTypeId(issueTypeId)
        setSummary(summary)
        setDescription(description)
        setReporterId(user.key)
        setAssigneeId(user.key)
    }

    createValidationResult = issueService.validateCreate(user, issueInputParameters)
    if (createValidationResult.isValid()) {
        createResult = issueService.create(user, createValidationResult)
        if (!createResult.isValid()) {
            log.error("Failed to create linked issue: ${createResult.errorCollection}")
            return null
        }
        issueLinkManager.createIssueLink(parentIssue.id, createResult.issue.id, 10000L, null, user)
        return createResult.issue
    } else {
        log.error("Create Validation Result is invalid: ${createValidationResult.errorCollection}")
        return null
    }
}

def projectKey = issue.getProjectObject().key
def issueTypeId = issue.getIssueType().id
def summary = issue.getSummary()

def components = issue.getComponents()

components.each { Component component ->
    def componentSummary = "${summary} - ${component.name}"
    def componentDescription = "This issue was created automatically for the component: ${component.name}"
    createLinkedIssue(projectKey, componentSummary, componentDescription, issueTypeId, issue)
}
